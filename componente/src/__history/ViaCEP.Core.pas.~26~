unit ViaCEP.Core;

interface

uses
  System.Classes,
  IdHTTP,
  IdSSLOpenSSL,Web.HTTPApp;

type

  TReturnFormat = (rfJSON, rfXML);

  TViaCEP = class(TComponent)
  private
    FReturnFormat: TReturnFormat;
    FIdHTTP: TIdHTTP;
    FIdSSLIOHandlerSocketOpenSSL: TIdSSLIOHandlerSocketOpenSSL;

    function Get(const ACEP: string): string;
    function GetCEP(const ACEP: string): string;
    function GetEndereco(const AUF, ACidade, AEndereco: string): string;
    function GetFormat: String;
    function ValidateCEP(const AValue: String): String;
    function ValidarEndereco(const AUF, ACidade, AEndereco: string): string;
  protected
    { Protected declarations }
  public
    constructor Create;
    destructor Destroy; override;
  published
    property ReturnFormat: TReturnFormat read FReturnFormat write FReturnFormat;
  end;

const
  URL_BASE = 'https://viacep.com.br/ws/%s/%s';

resourcestring
  MSG_ERRO_CEP_NAO_ENCONTRADO = 'CEP não foi encontrado';
  MSG_ERRO_CEP_DIGITO = 'CEP deve ter 8 dígitos';
  MSG_ERRO_CEP_INVALIDO = 'Formato de CEP inválido';

procedure Register;

implementation

uses
  System.SysUtils;

procedure Register;
begin
  RegisterComponents('ViaCEP', [TViaCEP]);
end;

{ TViaCEP }

constructor TViaCEP.Create;
begin
  FIdHTTP := TIdHTTP.Create;
  FIdSSLIOHandlerSocketOpenSSL := TIdSSLIOHandlerSocketOpenSSL.Create;
  FIdHTTP.IOHandler := FIdSSLIOHandlerSocketOpenSSL;
  FIdSSLIOHandlerSocketOpenSSL.SSLOptions.SSLVersions := [sslvTLSv1, sslvTLSv1_1, sslvTLSv1_2];
end;

destructor TViaCEP.Destroy;
begin
  FIdSSLIOHandlerSocketOpenSSL.Free;
  FIdHTTP.Free;
  inherited;
end;

function TViaCEP.Get(const ACEP: string): string;
var
  LResponse: TStringStream;
begin
  Result := EmptyStr;

  LResponse := TStringStream.Create;
  try

    FIdHTTP.Get(Format(URL_BASE, [ACep.Trim, GetFormat]), LResponse);
    if FIdHTTP.ResponseCode = 200 then
    begin
      if LResponse.DataString.Contains('"erro": true') then
        Exit('O CEP informado não foi encontrado.');

      Result := UTF8ToString(AnsiString(LResponse.DataString));
    end
    else
      Exit('Erro ao consultar o CEP. Código HTTP: ' + FIdHTTP.ResponseCode.ToString);

  finally
    LResponse.Free;
  end;
end;

function TViaCEP.GetCEP(const ACEP: string): string;
begin
  Result := EmptyStr;
  Result := ValidateCEP(ACEP);

  if not(Result.IsEmpty) then
    Exit;

  Result := Get(ACEP);
end;

function TViaCEP.GetEndereco(const AUF, ACidade, AEndereco: string): string;
begin

end;

function TViaCEP.GetFormat: String;
begin
  Result := 'json';

  if FReturnFormat = rfXML then
    Result := 'xml';

end;

function TViaCEP.ValidateCEP(const AValue: String): String;
const
  INVALID_CHARACTER = -1;
begin
  Result := EmptyStr;

  if AValue.Trim.Length <> 8 then
    Exit(MSG_ERRO_CEP_DIGITO);

  if StrToIntDef(AValue, INVALID_CHARACTER) = INVALID_CHARACTER then
    Exit(MSG_ERRO_CEP_INVALIDO);

end;

end.
